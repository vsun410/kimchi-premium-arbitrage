"""
Claude Code Interceptor - Claude Code의 코드를 자동으로 검증하는 워크플로우
Git pre-commit hook 및 실시간 모니터링을 통해 코드 드리프트 방지
"""

import os
import sys
import json
import asyncio
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import subprocess
import tempfile
from pathlib import Path
import hashlib

from notion_governance_integration import NotionGovernanceIntegration
from vision_guardian import VisionGuardian


class ClaudeCodeInterceptor:
    """
    Claude Code의 코드 변경을 감지하고 자동으로 검증
    Git hooks, 파일 시스템 모니터링, API 인터셉트 등 다양한 방법 활용
    """
    
    def __init__(self, governance_integration: NotionGovernanceIntegration):
        """
        Args:
            governance_integration: Notion 거버넌스 통합 시스템
        """
        self.governance = governance_integration
        self.monitoring_active = False
        self.validation_cache = {}  # 파일 해시 -> 검증 결과 캐시
        self.watch_directories = [
            './kimchi-premium-arbitrage/src',
            './kimchi-premium-arbitrage/backend',
            './kimchi-premium-arbitrage/strategies'
        ]
        
    def install_git_hooks(self):
        """Git pre-commit hook 설치"""
        
        hook_content = """#!/usr/bin/env python3
# Auto-generated by Claude Code Interceptor
# DO NOT EDIT MANUALLY

import sys
import os
import json
import subprocess

# 프로젝트 루트 추가
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from executive_control.claude_code_interceptor import ClaudeCodeInterceptor
from executive_control.notion_governance_integration import NotionGovernanceIntegration

def main():
    # 스테이징된 파일 목록 가져오기
    result = subprocess.run(
        ['git', 'diff', '--cached', '--name-only'],
        capture_output=True,
        text=True
    )
    
    staged_files = result.stdout.strip().split('\\n')
    python_files = [f for f in staged_files if f.endswith('.py')]
    
    if not python_files:
        return 0  # Python 파일이 없으면 통과
    
    print("🔍 Vision Guardian: Validating code changes...")
    
    # 거버넌스 시스템 초기화
    config = {
        'vision_db': os.getenv('NOTION_VISION_DB'),
        'tasks_db': os.getenv('NOTION_TASKS_DB'),
        'validation_db': os.getenv('NOTION_VALIDATION_DB'),
        'dashboard_page': os.getenv('NOTION_DASHBOARD_PAGE')
    }
    
    governance = NotionGovernanceIntegration(
        os.getenv('NOTION_TOKEN'),
        config
    )
    
    interceptor = ClaudeCodeInterceptor(governance)
    
    # 각 파일 검증
    all_approved = True
    for file_path in python_files:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
        
        approved, feedback = interceptor.validate_code_sync(file_path, code)
        
        if not approved:
            print(f"\\n❌ Validation failed for {file_path}:")
            print(feedback)
            all_approved = False
        else:
            print(f"✅ {file_path} approved")
    
    if not all_approved:
        print("\\n⚠️  Code validation failed. Please fix the issues and try again.")
        print("💡 Tip: Review the Vision Guardian feedback above.")
        return 1
    
    print("\\n✅ All files passed Vision Guardian validation!")
    return 0

if __name__ == '__main__':
    sys.exit(main())
"""
        
        # Git hooks 디렉토리 생성
        git_dir = Path('.git/hooks')
        if not git_dir.exists():
            print("Warning: .git/hooks directory not found")
            return False
        
        # pre-commit hook 작성
        hook_path = git_dir / 'pre-commit'
        with open(hook_path, 'w', encoding='utf-8') as f:
            f.write(hook_content)
        
        # 실행 권한 추가 (Unix 시스템)
        if sys.platform != 'win32':
            os.chmod(hook_path, 0o755)
        
        print(f"✅ Git pre-commit hook installed at {hook_path}")
        return True
    
    def validate_code_sync(self, file_path: str, code: str) -> Tuple[bool, str]:
        """
        동기적 코드 검증 (Git hook용)
        
        Args:
            file_path: 파일 경로
            code: 검증할 코드
            
        Returns:
            (승인 여부, 피드백)
        """
        # 파일 해시 계산
        code_hash = hashlib.md5(code.encode()).hexdigest()
        
        # 캐시 확인
        if code_hash in self.validation_cache:
            cached = self.validation_cache[code_hash]
            return cached['approved'], cached['feedback']
        
        # 컴포넌트 식별
        component = self._identify_component(file_path)
        
        # 간단한 작업 명세 생성
        task_spec = {
            'task_id': f"AUTO-{datetime.now().strftime('%Y%m%d%H%M%S')}",
            'component': component,
            'description': f"Automated validation for {file_path}"
        }
        
        # Vision Guardian으로 검증
        result = self.governance.vision_guardian.validate_code(code, task_spec)
        feedback = self.governance.vision_guardian.generate_feedback(result)
        
        # 캐시 저장
        self.validation_cache[code_hash] = {
            'approved': result.approved,
            'feedback': feedback,
            'timestamp': datetime.now().isoformat()
        }
        
        return result.approved, feedback
    
    def _identify_component(self, file_path: str) -> str:
        """파일 경로에서 컴포넌트 식별"""
        path_lower = file_path.lower()
        
        if 'trading' in path_lower or 'exchange' in path_lower:
            return 'trading_core'
        elif 'ml' in path_lower or 'model' in path_lower:
            return 'ml_engine'
        elif 'dashboard' in path_lower or 'ui' in path_lower:
            return 'dashboard'
        elif 'risk' in path_lower:
            return 'risk_manager'
        elif 'data' in path_lower:
            return 'data_pipeline'
        else:
            return 'general'
    
    async def start_file_monitoring(self):
        """파일 시스템 모니터링 시작"""
        self.monitoring_active = True
        print("🔍 Starting file system monitoring...")
        
        # watchdog 라이브러리 사용 (설치 필요: pip install watchdog)
        try:
            from watchdog.observers import Observer
            from watchdog.events import FileSystemEventHandler
        except ImportError:
            print("Warning: watchdog not installed. Install with: pip install watchdog")
            return
        
        class CodeChangeHandler(FileSystemEventHandler):
            def __init__(self, interceptor):
                self.interceptor = interceptor
            
            def on_modified(self, event):
                if event.is_directory:
                    return
                
                if event.src_path.endswith('.py'):
                    asyncio.create_task(
                        self.interceptor.handle_file_change(event.src_path)
                    )
        
        # Observer 설정
        event_handler = CodeChangeHandler(self)
        observer = Observer()
        
        for directory in self.watch_directories:
            if os.path.exists(directory):
                observer.schedule(event_handler, directory, recursive=True)
                print(f"  Watching: {directory}")
        
        observer.start()
        
        try:
            while self.monitoring_active:
                await asyncio.sleep(1)
        finally:
            observer.stop()
            observer.join()
    
    async def handle_file_change(self, file_path: str):
        """파일 변경 감지 시 처리"""
        print(f"\n📝 File changed: {file_path}")
        
        # 파일 내용 읽기
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
        except Exception as e:
            print(f"Error reading file: {e}")
            return
        
        # 코드 검증
        approved, feedback = self.validate_code_sync(file_path, code)
        
        if not approved:
            print(f"⚠️  Validation warning for {file_path}:")
            print(feedback[:500])  # 처음 500자만 출력
            
            # Notion에 경고 기록
            await self._record_warning_to_notion(file_path, feedback)
        else:
            print(f"✅ {file_path} passes validation")
    
    async def _record_warning_to_notion(self, file_path: str, feedback: str):
        """검증 경고를 Notion에 기록"""
        
        if not self.governance.validation_db:
            return
        
        try:
            page = self.governance.notion.pages.create(
                parent={"database_id": self.governance.validation_db},
                properties={
                    "Task ID": {"title": [{"text": {"content": f"Warning: {file_path}"}}]},
                    "Status": {"select": {"name": "Warning"}},
                    "Timestamp": {"date": {"start": datetime.now().isoformat()}},
                    "Validator": {"select": {"name": "File Monitor"}}
                },
                children=[
                    {
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"text": {"content": feedback[:2000]}}]
                        }
                    }
                ]
            )
        except Exception as e:
            print(f"Failed to record warning to Notion: {e}")
    
    def create_vscode_extension(self):
        """VS Code 확장 설정 생성 (실시간 검증)"""
        
        vscode_settings = {
            "editor.formatOnSave": True,
            "python.linting.enabled": True,
            "python.linting.flake8Enabled": True,
            "files.watcherExclude": {
                "**/.git/**": True,
                "**/node_modules/**": True
            },
            "tasks": {
                "version": "2.0.0",
                "tasks": [
                    {
                        "label": "Vision Guardian Validation",
                        "type": "shell",
                        "command": "python",
                        "args": [
                            "-m",
                            "executive_control.validate_current_file",
                            "${file}"
                        ],
                        "group": "build",
                        "presentation": {
                            "reveal": "always"
                        },
                        "problemMatcher": "$python"
                    }
                ]
            }
        }
        
        # .vscode 디렉토리 생성
        vscode_dir = Path('.vscode')
        vscode_dir.mkdir(exist_ok=True)
        
        # settings.json 작성
        settings_path = vscode_dir / 'settings.json'
        with open(settings_path, 'w', encoding='utf-8') as f:
            json.dump(vscode_settings, f, indent=2)
        
        print(f"✅ VS Code settings created at {settings_path}")
        
        # 키보드 단축키 설정
        keybindings = [
            {
                "key": "ctrl+shift+v",
                "command": "workbench.action.tasks.runTask",
                "args": "Vision Guardian Validation"
            }
        ]
        
        keybindings_path = vscode_dir / 'keybindings.json'
        with open(keybindings_path, 'w', encoding='utf-8') as f:
            json.dump(keybindings, f, indent=2)
        
        print(f"✅ VS Code keybindings created (Ctrl+Shift+V for validation)")
    
    def create_validation_script(self):
        """독립 실행 가능한 검증 스크립트 생성"""
        
        script_content = """#!/usr/bin/env python3
\"\"\"
Vision Guardian Validation Script
Usage: python validate.py <file_path>
\"\"\"

import sys
import os
import asyncio
from pathlib import Path

# 프로젝트 루트 추가
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from executive_control.claude_code_interceptor import ClaudeCodeInterceptor
from executive_control.notion_governance_integration import NotionGovernanceIntegration


async def validate_file(file_path: str):
    \"\"\"파일 검증\"\"\"
    
    # 파일 존재 확인
    if not os.path.exists(file_path):
        print(f"Error: File not found: {file_path}")
        return 1
    
    # 코드 읽기
    with open(file_path, 'r', encoding='utf-8') as f:
        code = f.read()
    
    # 거버넌스 시스템 초기화
    config = {
        'vision_db': os.getenv('NOTION_VISION_DB'),
        'tasks_db': os.getenv('NOTION_TASKS_DB'),
        'validation_db': os.getenv('NOTION_VALIDATION_DB'),
        'dashboard_page': os.getenv('NOTION_DASHBOARD_PAGE')
    }
    
    governance = NotionGovernanceIntegration(
        os.getenv('NOTION_TOKEN'),
        config
    )
    
    await governance.initialize_governance()
    
    interceptor = ClaudeCodeInterceptor(governance)
    
    # 검증 실행
    print(f"🔍 Validating {file_path}...")
    approved, feedback = interceptor.validate_code_sync(file_path, code)
    
    print("\\n" + "="*50)
    if approved:
        print("✅ VALIDATION PASSED")
    else:
        print("❌ VALIDATION FAILED")
    print("="*50)
    
    print(feedback)
    
    return 0 if approved else 1


async def validate_all():
    \"\"\"모든 Python 파일 검증\"\"\"
    
    python_files = []
    for root, dirs, files in os.walk('./kimchi-premium-arbitrage'):
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    print(f"Found {len(python_files)} Python files to validate")
    
    failed_files = []
    for file_path in python_files:
        result = await validate_file(file_path)
        if result != 0:
            failed_files.append(file_path)
    
    if failed_files:
        print(f"\\n❌ {len(failed_files)} files failed validation:")
        for f in failed_files:
            print(f"  - {f}")
        return 1
    else:
        print(f"\\n✅ All {len(python_files)} files passed validation!")
        return 0


def main():
    if len(sys.argv) < 2:
        print("Usage: python validate.py <file_path>")
        print("       python validate.py --all")
        sys.exit(1)
    
    if sys.argv[1] == '--all':
        sys.exit(asyncio.run(validate_all()))
    else:
        sys.exit(asyncio.run(validate_file(sys.argv[1])))


if __name__ == '__main__':
    main()
"""
        
        # validate.py 생성
        script_path = Path('validate.py')
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        # 실행 권한 추가 (Unix)
        if sys.platform != 'win32':
            os.chmod(script_path, 0o755)
        
        print(f"✅ Validation script created: {script_path}")
        print("  Usage: python validate.py <file_path>")
        print("         python validate.py --all")
    
    def setup_ci_validation(self):
        """CI/CD 파이프라인에 검증 추가"""
        
        github_workflow = """name: Vision Guardian Validation

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install notion-client sentence-transformers chromadb
    
    - name: Set up environment
      env:
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        NOTION_VISION_DB: ${{ secrets.NOTION_VISION_DB }}
        NOTION_TASKS_DB: ${{ secrets.NOTION_TASKS_DB }}
        NOTION_VALIDATION_DB: ${{ secrets.NOTION_VALIDATION_DB }}
        NOTION_DASHBOARD_PAGE: ${{ secrets.NOTION_DASHBOARD_PAGE }}
      run: |
        echo "Environment configured"
    
    - name: Run Vision Guardian Validation
      run: |
        python validate.py --all
    
    - name: Upload validation report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation_report.json
"""
        
        # .github/workflows 디렉토리 생성
        workflows_dir = Path('.github/workflows')
        workflows_dir.mkdir(parents=True, exist_ok=True)
        
        # workflow 파일 작성
        workflow_path = workflows_dir / 'vision-guardian.yml'
        with open(workflow_path, 'w', encoding='utf-8') as f:
            f.write(github_workflow)
        
        print(f"✅ GitHub Actions workflow created: {workflow_path}")


# 메인 설정 함수
async def setup_complete_validation_system():
    """완전한 검증 시스템 설정"""
    
    print("🚀 Setting up Vision Guardian Validation System...")
    
    # 1. 거버넌스 시스템 초기화
    config = {
        'vision_db': os.getenv('NOTION_VISION_DB'),
        'tasks_db': os.getenv('NOTION_TASKS_DB'),
        'validation_db': os.getenv('NOTION_VALIDATION_DB'),
        'dashboard_page': os.getenv('NOTION_DASHBOARD_PAGE')
    }
    
    governance = NotionGovernanceIntegration(
        os.getenv('NOTION_TOKEN'),
        config
    )
    
    await governance.initialize_governance()
    
    # 2. Interceptor 초기화
    interceptor = ClaudeCodeInterceptor(governance)
    
    # 3. Git hooks 설치
    interceptor.install_git_hooks()
    
    # 4. VS Code 설정 생성
    interceptor.create_vscode_extension()
    
    # 5. 검증 스크립트 생성
    interceptor.create_validation_script()
    
    # 6. CI/CD 설정
    interceptor.setup_ci_validation()
    
    print("\n✅ Vision Guardian Validation System Setup Complete!")
    print("\n📋 Available validation methods:")
    print("  1. Git pre-commit hook (automatic)")
    print("  2. Manual validation: python validate.py <file>")
    print("  3. VS Code: Ctrl+Shift+V")
    print("  4. CI/CD: GitHub Actions")
    print("  5. File monitoring: Run 'python -m executive_control.monitor'")
    
    return interceptor


if __name__ == "__main__":
    # 설정 실행
    asyncio.run(setup_complete_validation_system())